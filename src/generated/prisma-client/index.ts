// Code generated by Prisma (prisma@1.35.0-beta). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  attribute: (where?: AttributeWhereInput) => Promise<boolean>;
  email: (where?: EmailWhereInput) => Promise<boolean>;
  identityProof: (where?: IdentityProofWhereInput) => Promise<boolean>;
  phoneNumber: (where?: PhoneNumberWhereInput) => Promise<boolean>;
  taxId: (where?: TaxIdWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attribute: (where: AttributeWhereUniqueInput) => AttributeNullablePromise;
  attributes: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attribute>;
  attributesConnection: (args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttributeConnectionPromise;
  email: (where: EmailWhereUniqueInput) => EmailNullablePromise;
  emails: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Email>;
  emailsConnection: (args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EmailConnectionPromise;
  identityProof: (
    where: IdentityProofWhereUniqueInput
  ) => IdentityProofNullablePromise;
  identityProofs: (args?: {
    where?: IdentityProofWhereInput;
    orderBy?: IdentityProofOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<IdentityProof>;
  identityProofsConnection: (args?: {
    where?: IdentityProofWhereInput;
    orderBy?: IdentityProofOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => IdentityProofConnectionPromise;
  phoneNumber: (
    where: PhoneNumberWhereUniqueInput
  ) => PhoneNumberNullablePromise;
  phoneNumbers: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PhoneNumber>;
  phoneNumbersConnection: (args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PhoneNumberConnectionPromise;
  taxId: (where: TaxIdWhereUniqueInput) => TaxIdNullablePromise;
  taxIds: (args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TaxId>;
  taxIdsConnection: (args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaxIdConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttribute: (data: AttributeCreateInput) => AttributePromise;
  updateAttribute: (args: {
    data: AttributeUpdateInput;
    where: AttributeWhereUniqueInput;
  }) => AttributePromise;
  updateManyAttributes: (args: {
    data: AttributeUpdateManyMutationInput;
    where?: AttributeWhereInput;
  }) => BatchPayloadPromise;
  upsertAttribute: (args: {
    where: AttributeWhereUniqueInput;
    create: AttributeCreateInput;
    update: AttributeUpdateInput;
  }) => AttributePromise;
  deleteAttribute: (where: AttributeWhereUniqueInput) => AttributePromise;
  deleteManyAttributes: (where?: AttributeWhereInput) => BatchPayloadPromise;
  createEmail: (data: EmailCreateInput) => EmailPromise;
  updateEmail: (args: {
    data: EmailUpdateInput;
    where: EmailWhereUniqueInput;
  }) => EmailPromise;
  upsertEmail: (args: {
    where: EmailWhereUniqueInput;
    create: EmailCreateInput;
    update: EmailUpdateInput;
  }) => EmailPromise;
  deleteEmail: (where: EmailWhereUniqueInput) => EmailPromise;
  deleteManyEmails: (where?: EmailWhereInput) => BatchPayloadPromise;
  createIdentityProof: (data: IdentityProofCreateInput) => IdentityProofPromise;
  updateIdentityProof: (args: {
    data: IdentityProofUpdateInput;
    where: IdentityProofWhereUniqueInput;
  }) => IdentityProofPromise;
  upsertIdentityProof: (args: {
    where: IdentityProofWhereUniqueInput;
    create: IdentityProofCreateInput;
    update: IdentityProofUpdateInput;
  }) => IdentityProofPromise;
  deleteIdentityProof: (
    where: IdentityProofWhereUniqueInput
  ) => IdentityProofPromise;
  deleteManyIdentityProofs: (
    where?: IdentityProofWhereInput
  ) => BatchPayloadPromise;
  createPhoneNumber: (data: PhoneNumberCreateInput) => PhoneNumberPromise;
  updatePhoneNumber: (args: {
    data: PhoneNumberUpdateInput;
    where: PhoneNumberWhereUniqueInput;
  }) => PhoneNumberPromise;
  upsertPhoneNumber: (args: {
    where: PhoneNumberWhereUniqueInput;
    create: PhoneNumberCreateInput;
    update: PhoneNumberUpdateInput;
  }) => PhoneNumberPromise;
  deletePhoneNumber: (where: PhoneNumberWhereUniqueInput) => PhoneNumberPromise;
  deleteManyPhoneNumbers: (
    where?: PhoneNumberWhereInput
  ) => BatchPayloadPromise;
  createTaxId: (data: TaxIdCreateInput) => TaxIdPromise;
  updateTaxId: (args: {
    data: TaxIdUpdateInput;
    where: TaxIdWhereUniqueInput;
  }) => TaxIdPromise;
  upsertTaxId: (args: {
    where: TaxIdWhereUniqueInput;
    create: TaxIdCreateInput;
    update: TaxIdUpdateInput;
  }) => TaxIdPromise;
  deleteTaxId: (where: TaxIdWhereUniqueInput) => TaxIdPromise;
  deleteManyTaxIds: (where?: TaxIdWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attribute: (
    where?: AttributeSubscriptionWhereInput
  ) => AttributeSubscriptionPayloadSubscription;
  email: (
    where?: EmailSubscriptionWhereInput
  ) => EmailSubscriptionPayloadSubscription;
  identityProof: (
    where?: IdentityProofSubscriptionWhereInput
  ) => IdentityProofSubscriptionPayloadSubscription;
  phoneNumber: (
    where?: PhoneNumberSubscriptionWhereInput
  ) => PhoneNumberSubscriptionPayloadSubscription;
  taxId: (
    where?: TaxIdSubscriptionWhereInput
  ) => TaxIdSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthLevel = "ADMIN" | "USER" | "PROSPECT" | "BLACKLISTED";

export type TaxIdOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EmailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AttributeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "attr_type_ASC"
  | "attr_type_DESC";

export type PhoneNumberOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type IdentityProofOrderByInput = "id_ASC" | "id_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "auth_level_ASC"
  | "auth_level_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AttributeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaxIdWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  AND?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
  OR?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
  NOT?: Maybe<TaxIdWhereInput[] | TaxIdWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  id_proof?: Maybe<IdentityProofWhereInput>;
  auth_level?: Maybe<AuthLevel>;
  auth_level_not?: Maybe<AuthLevel>;
  auth_level_in?: Maybe<AuthLevel[] | AuthLevel>;
  auth_level_not_in?: Maybe<AuthLevel[] | AuthLevel>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface IdentityProofWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tax_id_every?: Maybe<TaxIdWhereInput>;
  tax_id_some?: Maybe<TaxIdWhereInput>;
  tax_id_none?: Maybe<TaxIdWhereInput>;
  email_every?: Maybe<EmailWhereInput>;
  email_some?: Maybe<EmailWhereInput>;
  email_none?: Maybe<EmailWhereInput>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<IdentityProofWhereInput[] | IdentityProofWhereInput>;
  OR?: Maybe<IdentityProofWhereInput[] | IdentityProofWhereInput>;
  NOT?: Maybe<IdentityProofWhereInput[] | IdentityProofWhereInput>;
}

export interface EmailWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  OR?: Maybe<EmailWhereInput[] | EmailWhereInput>;
  NOT?: Maybe<EmailWhereInput[] | EmailWhereInput>;
}

export interface AttributeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  attr_type?: Maybe<String>;
  attr_type_not?: Maybe<String>;
  attr_type_in?: Maybe<String[] | String>;
  attr_type_not_in?: Maybe<String[] | String>;
  attr_type_lt?: Maybe<String>;
  attr_type_lte?: Maybe<String>;
  attr_type_gt?: Maybe<String>;
  attr_type_gte?: Maybe<String>;
  attr_type_contains?: Maybe<String>;
  attr_type_not_contains?: Maybe<String>;
  attr_type_starts_with?: Maybe<String>;
  attr_type_not_starts_with?: Maybe<String>;
  attr_type_ends_with?: Maybe<String>;
  attr_type_not_ends_with?: Maybe<String>;
  tax_id_every?: Maybe<TaxIdWhereInput>;
  tax_id_some?: Maybe<TaxIdWhereInput>;
  tax_id_none?: Maybe<TaxIdWhereInput>;
  email_every?: Maybe<EmailWhereInput>;
  email_some?: Maybe<EmailWhereInput>;
  email_none?: Maybe<EmailWhereInput>;
  phone_number_every?: Maybe<PhoneNumberWhereInput>;
  phone_number_some?: Maybe<PhoneNumberWhereInput>;
  phone_number_none?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
  OR?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
  NOT?: Maybe<AttributeWhereInput[] | AttributeWhereInput>;
}

export interface PhoneNumberWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  owner?: Maybe<UserWhereInput>;
  attribute_every?: Maybe<AttributeWhereInput>;
  attribute_some?: Maybe<AttributeWhereInput>;
  attribute_none?: Maybe<AttributeWhereInput>;
  AND?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  OR?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
  NOT?: Maybe<PhoneNumberWhereInput[] | PhoneNumberWhereInput>;
}

export type EmailWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type IdentityProofWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PhoneNumberWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TaxIdWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AttributeCreateInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyInput>;
  email?: Maybe<EmailCreateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutAttributeInput>;
}

export interface TaxIdCreateManyInput {
  create?: Maybe<TaxIdCreateInput[] | TaxIdCreateInput>;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
}

export interface TaxIdCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  id_proof?: Maybe<IdentityProofCreateOneInput>;
  auth_level?: Maybe<AuthLevel>;
}

export interface IdentityProofCreateOneInput {
  create?: Maybe<IdentityProofCreateInput>;
  connect?: Maybe<IdentityProofWhereUniqueInput>;
}

export interface IdentityProofCreateInput {
  id?: Maybe<ID_Input>;
  tax_id?: Maybe<TaxIdCreateManyInput>;
  email?: Maybe<EmailCreateManyInput>;
  phone_number?: Maybe<PhoneNumberCreateManyInput>;
}

export interface EmailCreateManyInput {
  create?: Maybe<EmailCreateInput[] | EmailCreateInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
}

export interface EmailCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyWithoutEmailInput>;
}

export interface AttributeCreateManyWithoutEmailInput {
  create?: Maybe<
    AttributeCreateWithoutEmailInput[] | AttributeCreateWithoutEmailInput
  >;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface AttributeCreateWithoutEmailInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyInput>;
  phone_number?: Maybe<PhoneNumberCreateManyWithoutAttributeInput>;
}

export interface PhoneNumberCreateManyWithoutAttributeInput {
  create?: Maybe<
    | PhoneNumberCreateWithoutAttributeInput[]
    | PhoneNumberCreateWithoutAttributeInput
  >;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateWithoutAttributeInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
}

export interface PhoneNumberCreateManyInput {
  create?: Maybe<PhoneNumberCreateInput[] | PhoneNumberCreateInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
}

export interface PhoneNumberCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  attribute?: Maybe<AttributeCreateManyWithoutPhone_numberInput>;
}

export interface AttributeCreateManyWithoutPhone_numberInput {
  create?: Maybe<
    | AttributeCreateWithoutPhone_numberInput[]
    | AttributeCreateWithoutPhone_numberInput
  >;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
}

export interface AttributeCreateWithoutPhone_numberInput {
  id?: Maybe<ID_Input>;
  attr_type: String;
  tax_id?: Maybe<TaxIdCreateManyInput>;
  email?: Maybe<EmailCreateManyWithoutAttributeInput>;
}

export interface EmailCreateManyWithoutAttributeInput {
  create?: Maybe<
    EmailCreateWithoutAttributeInput[] | EmailCreateWithoutAttributeInput
  >;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
}

export interface EmailCreateWithoutAttributeInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
}

export interface AttributeUpdateInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface TaxIdUpdateManyInput {
  create?: Maybe<TaxIdCreateInput[] | TaxIdCreateInput>;
  update?: Maybe<
    | TaxIdUpdateWithWhereUniqueNestedInput[]
    | TaxIdUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | TaxIdUpsertWithWhereUniqueNestedInput[]
    | TaxIdUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  connect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  set?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  disconnect?: Maybe<TaxIdWhereUniqueInput[] | TaxIdWhereUniqueInput>;
  deleteMany?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
}

export interface TaxIdUpdateWithWhereUniqueNestedInput {
  where: TaxIdWhereUniqueInput;
  data: TaxIdUpdateDataInput;
}

export interface TaxIdUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  id_proof?: Maybe<IdentityProofUpdateOneInput>;
  auth_level?: Maybe<AuthLevel>;
}

export interface IdentityProofUpdateOneInput {
  create?: Maybe<IdentityProofCreateInput>;
  update?: Maybe<IdentityProofUpdateDataInput>;
  upsert?: Maybe<IdentityProofUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<IdentityProofWhereUniqueInput>;
}

export interface IdentityProofUpdateDataInput {
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyInput>;
}

export interface EmailUpdateManyInput {
  create?: Maybe<EmailCreateInput[] | EmailCreateInput>;
  update?: Maybe<
    | EmailUpdateWithWhereUniqueNestedInput[]
    | EmailUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | EmailUpsertWithWhereUniqueNestedInput[]
    | EmailUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  set?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  disconnect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  deleteMany?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
}

export interface EmailUpdateWithWhereUniqueNestedInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateDataInput;
}

export interface EmailUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutEmailInput>;
}

export interface AttributeUpdateManyWithoutEmailInput {
  create?: Maybe<
    AttributeCreateWithoutEmailInput[] | AttributeCreateWithoutEmailInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueWithoutEmailInput[]
    | AttributeUpdateWithWhereUniqueWithoutEmailInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueWithoutEmailInput[]
    | AttributeUpsertWithWhereUniqueWithoutEmailInput
  >;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueWithoutEmailInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateWithoutEmailDataInput;
}

export interface AttributeUpdateWithoutEmailDataInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyWithoutAttributeInput>;
}

export interface PhoneNumberUpdateManyWithoutAttributeInput {
  create?: Maybe<
    | PhoneNumberCreateWithoutAttributeInput[]
    | PhoneNumberCreateWithoutAttributeInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput[]
    | PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput[]
    | PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueWithoutAttributeInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateWithoutAttributeDataInput;
}

export interface PhoneNumberUpdateWithoutAttributeDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface PhoneNumberUpsertWithWhereUniqueWithoutAttributeInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateWithoutAttributeDataInput;
  create: PhoneNumberCreateWithoutAttributeInput;
}

export interface PhoneNumberScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  OR?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
  NOT?: Maybe<PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput>;
}

export interface AttributeUpsertWithWhereUniqueWithoutEmailInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateWithoutEmailDataInput;
  create: AttributeCreateWithoutEmailInput;
}

export interface AttributeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  attr_type?: Maybe<String>;
  attr_type_not?: Maybe<String>;
  attr_type_in?: Maybe<String[] | String>;
  attr_type_not_in?: Maybe<String[] | String>;
  attr_type_lt?: Maybe<String>;
  attr_type_lte?: Maybe<String>;
  attr_type_gt?: Maybe<String>;
  attr_type_gte?: Maybe<String>;
  attr_type_contains?: Maybe<String>;
  attr_type_not_contains?: Maybe<String>;
  attr_type_starts_with?: Maybe<String>;
  attr_type_not_starts_with?: Maybe<String>;
  attr_type_ends_with?: Maybe<String>;
  attr_type_not_ends_with?: Maybe<String>;
  AND?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  OR?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  NOT?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
}

export interface AttributeUpdateManyWithWhereNestedInput {
  where: AttributeScalarWhereInput;
  data: AttributeUpdateManyDataInput;
}

export interface AttributeUpdateManyDataInput {
  attr_type?: Maybe<String>;
}

export interface EmailUpsertWithWhereUniqueNestedInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateDataInput;
  create: EmailCreateInput;
}

export interface EmailScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  OR?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
  NOT?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
}

export interface PhoneNumberUpdateManyInput {
  create?: Maybe<PhoneNumberCreateInput[] | PhoneNumberCreateInput>;
  update?: Maybe<
    | PhoneNumberUpdateWithWhereUniqueNestedInput[]
    | PhoneNumberUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | PhoneNumberUpsertWithWhereUniqueNestedInput[]
    | PhoneNumberUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  connect?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  set?: Maybe<PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput>;
  disconnect?: Maybe<
    PhoneNumberWhereUniqueInput[] | PhoneNumberWhereUniqueInput
  >;
  deleteMany?: Maybe<
    PhoneNumberScalarWhereInput[] | PhoneNumberScalarWhereInput
  >;
}

export interface PhoneNumberUpdateWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput;
  data: PhoneNumberUpdateDataInput;
}

export interface PhoneNumberUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutPhone_numberInput>;
}

export interface AttributeUpdateManyWithoutPhone_numberInput {
  create?: Maybe<
    | AttributeCreateWithoutPhone_numberInput[]
    | AttributeCreateWithoutPhone_numberInput
  >;
  delete?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  connect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  set?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  disconnect?: Maybe<AttributeWhereUniqueInput[] | AttributeWhereUniqueInput>;
  update?: Maybe<
    | AttributeUpdateWithWhereUniqueWithoutPhone_numberInput[]
    | AttributeUpdateWithWhereUniqueWithoutPhone_numberInput
  >;
  upsert?: Maybe<
    | AttributeUpsertWithWhereUniqueWithoutPhone_numberInput[]
    | AttributeUpsertWithWhereUniqueWithoutPhone_numberInput
  >;
  deleteMany?: Maybe<AttributeScalarWhereInput[] | AttributeScalarWhereInput>;
  updateMany?: Maybe<
    | AttributeUpdateManyWithWhereNestedInput[]
    | AttributeUpdateManyWithWhereNestedInput
  >;
}

export interface AttributeUpdateWithWhereUniqueWithoutPhone_numberInput {
  where: AttributeWhereUniqueInput;
  data: AttributeUpdateWithoutPhone_numberDataInput;
}

export interface AttributeUpdateWithoutPhone_numberDataInput {
  attr_type?: Maybe<String>;
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyWithoutAttributeInput>;
}

export interface EmailUpdateManyWithoutAttributeInput {
  create?: Maybe<
    EmailCreateWithoutAttributeInput[] | EmailCreateWithoutAttributeInput
  >;
  delete?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  connect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  set?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  disconnect?: Maybe<EmailWhereUniqueInput[] | EmailWhereUniqueInput>;
  update?: Maybe<
    | EmailUpdateWithWhereUniqueWithoutAttributeInput[]
    | EmailUpdateWithWhereUniqueWithoutAttributeInput
  >;
  upsert?: Maybe<
    | EmailUpsertWithWhereUniqueWithoutAttributeInput[]
    | EmailUpsertWithWhereUniqueWithoutAttributeInput
  >;
  deleteMany?: Maybe<EmailScalarWhereInput[] | EmailScalarWhereInput>;
}

export interface EmailUpdateWithWhereUniqueWithoutAttributeInput {
  where: EmailWhereUniqueInput;
  data: EmailUpdateWithoutAttributeDataInput;
}

export interface EmailUpdateWithoutAttributeDataInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface EmailUpsertWithWhereUniqueWithoutAttributeInput {
  where: EmailWhereUniqueInput;
  update: EmailUpdateWithoutAttributeDataInput;
  create: EmailCreateWithoutAttributeInput;
}

export interface AttributeUpsertWithWhereUniqueWithoutPhone_numberInput {
  where: AttributeWhereUniqueInput;
  update: AttributeUpdateWithoutPhone_numberDataInput;
  create: AttributeCreateWithoutPhone_numberInput;
}

export interface PhoneNumberUpsertWithWhereUniqueNestedInput {
  where: PhoneNumberWhereUniqueInput;
  update: PhoneNumberUpdateDataInput;
  create: PhoneNumberCreateInput;
}

export interface IdentityProofUpsertNestedInput {
  update: IdentityProofUpdateDataInput;
  create: IdentityProofCreateInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface TaxIdUpsertWithWhereUniqueNestedInput {
  where: TaxIdWhereUniqueInput;
  update: TaxIdUpdateDataInput;
  create: TaxIdCreateInput;
}

export interface TaxIdScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
  OR?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
  NOT?: Maybe<TaxIdScalarWhereInput[] | TaxIdScalarWhereInput>;
}

export interface AttributeUpdateManyMutationInput {
  attr_type?: Maybe<String>;
}

export interface EmailUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutEmailInput>;
}

export interface IdentityProofUpdateInput {
  tax_id?: Maybe<TaxIdUpdateManyInput>;
  email?: Maybe<EmailUpdateManyInput>;
  phone_number?: Maybe<PhoneNumberUpdateManyInput>;
}

export interface PhoneNumberUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  attribute?: Maybe<AttributeUpdateManyWithoutPhone_numberInput>;
}

export interface TaxIdUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  id_proof?: Maybe<IdentityProofUpdateOneInput>;
  auth_level?: Maybe<AuthLevel>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  auth_level?: Maybe<AuthLevel>;
}

export interface AttributeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttributeWhereInput>;
  AND?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
  OR?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AttributeSubscriptionWhereInput[] | AttributeSubscriptionWhereInput
  >;
}

export interface EmailSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EmailWhereInput>;
  AND?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  OR?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
  NOT?: Maybe<EmailSubscriptionWhereInput[] | EmailSubscriptionWhereInput>;
}

export interface IdentityProofSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<IdentityProofWhereInput>;
  AND?: Maybe<
    IdentityProofSubscriptionWhereInput[] | IdentityProofSubscriptionWhereInput
  >;
  OR?: Maybe<
    IdentityProofSubscriptionWhereInput[] | IdentityProofSubscriptionWhereInput
  >;
  NOT?: Maybe<
    IdentityProofSubscriptionWhereInput[] | IdentityProofSubscriptionWhereInput
  >;
}

export interface PhoneNumberSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PhoneNumberWhereInput>;
  AND?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  OR?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PhoneNumberSubscriptionWhereInput[] | PhoneNumberSubscriptionWhereInput
  >;
}

export interface TaxIdSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaxIdWhereInput>;
  AND?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
  OR?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
  NOT?: Maybe<TaxIdSubscriptionWhereInput[] | TaxIdSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Attribute {
  id: ID_Output;
  attr_type: String;
}

export interface AttributePromise extends Promise<Attribute>, Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeSubscription
  extends Promise<AsyncIterator<Attribute>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attr_type: () => Promise<AsyncIterator<String>>;
  tax_id: <T = Promise<AsyncIterator<TaxIdSubscription>>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = Promise<AsyncIterator<EmailSubscription>>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeNullablePromise
  extends Promise<Attribute | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaxId {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaxIdPromise extends Promise<TaxId>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
}

export interface TaxIdSubscription
  extends Promise<AsyncIterator<TaxId>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
}

export interface TaxIdNullablePromise
  extends Promise<TaxId | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  auth_level?: AuthLevel;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  id_proof: <T = IdentityProofPromise>() => T;
  auth_level: () => Promise<AuthLevel>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  id_proof: <T = IdentityProofSubscription>() => T;
  auth_level: () => Promise<AsyncIterator<AuthLevel>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  id_proof: <T = IdentityProofPromise>() => T;
  auth_level: () => Promise<AuthLevel>;
}

export interface IdentityProof {
  id: ID_Output;
}

export interface IdentityProofPromise
  extends Promise<IdentityProof>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IdentityProofSubscription
  extends Promise<AsyncIterator<IdentityProof>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tax_id: <T = Promise<AsyncIterator<TaxIdSubscription>>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = Promise<AsyncIterator<EmailSubscription>>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = Promise<AsyncIterator<PhoneNumberSubscription>>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface IdentityProofNullablePromise
  extends Promise<IdentityProof | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tax_id: <T = FragmentableArray<TaxId>>(args?: {
    where?: TaxIdWhereInput;
    orderBy?: TaxIdOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  email: <T = FragmentableArray<Email>>(args?: {
    where?: EmailWhereInput;
    orderBy?: EmailOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  phone_number: <T = FragmentableArray<PhoneNumber>>(args?: {
    where?: PhoneNumberWhereInput;
    orderBy?: PhoneNumberOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Email {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmailPromise extends Promise<Email>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmailSubscription
  extends Promise<AsyncIterator<Email>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface EmailNullablePromise
  extends Promise<Email | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PhoneNumber {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhoneNumberPromise extends Promise<PhoneNumber>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PhoneNumberSubscription
  extends Promise<AsyncIterator<PhoneNumber>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  owner: <T = UserSubscription>() => T;
  attribute: <T = Promise<AsyncIterator<AttributeSubscription>>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PhoneNumberNullablePromise
  extends Promise<PhoneNumber | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  owner: <T = UserPromise>() => T;
  attribute: <T = FragmentableArray<Attribute>>(args?: {
    where?: AttributeWhereInput;
    orderBy?: AttributeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AttributeConnection {
  pageInfo: PageInfo;
  edges: AttributeEdge[];
}

export interface AttributeConnectionPromise
  extends Promise<AttributeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttributeEdge>>() => T;
  aggregate: <T = AggregateAttributePromise>() => T;
}

export interface AttributeConnectionSubscription
  extends Promise<AsyncIterator<AttributeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttributeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttributeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AttributeEdge {
  node: Attribute;
  cursor: String;
}

export interface AttributeEdgePromise
  extends Promise<AttributeEdge>,
    Fragmentable {
  node: <T = AttributePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttributeEdgeSubscription
  extends Promise<AsyncIterator<AttributeEdge>>,
    Fragmentable {
  node: <T = AttributeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAttribute {
  count: Int;
}

export interface AggregateAttributePromise
  extends Promise<AggregateAttribute>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttributeSubscription
  extends Promise<AsyncIterator<AggregateAttribute>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EmailConnection {
  pageInfo: PageInfo;
  edges: EmailEdge[];
}

export interface EmailConnectionPromise
  extends Promise<EmailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EmailEdge>>() => T;
  aggregate: <T = AggregateEmailPromise>() => T;
}

export interface EmailConnectionSubscription
  extends Promise<AsyncIterator<EmailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EmailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEmailSubscription>() => T;
}

export interface EmailEdge {
  node: Email;
  cursor: String;
}

export interface EmailEdgePromise extends Promise<EmailEdge>, Fragmentable {
  node: <T = EmailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EmailEdgeSubscription
  extends Promise<AsyncIterator<EmailEdge>>,
    Fragmentable {
  node: <T = EmailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateEmail {
  count: Int;
}

export interface AggregateEmailPromise
  extends Promise<AggregateEmail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEmailSubscription
  extends Promise<AsyncIterator<AggregateEmail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface IdentityProofConnection {
  pageInfo: PageInfo;
  edges: IdentityProofEdge[];
}

export interface IdentityProofConnectionPromise
  extends Promise<IdentityProofConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<IdentityProofEdge>>() => T;
  aggregate: <T = AggregateIdentityProofPromise>() => T;
}

export interface IdentityProofConnectionSubscription
  extends Promise<AsyncIterator<IdentityProofConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<IdentityProofEdgeSubscription>>>() => T;
  aggregate: <T = AggregateIdentityProofSubscription>() => T;
}

export interface IdentityProofEdge {
  node: IdentityProof;
  cursor: String;
}

export interface IdentityProofEdgePromise
  extends Promise<IdentityProofEdge>,
    Fragmentable {
  node: <T = IdentityProofPromise>() => T;
  cursor: () => Promise<String>;
}

export interface IdentityProofEdgeSubscription
  extends Promise<AsyncIterator<IdentityProofEdge>>,
    Fragmentable {
  node: <T = IdentityProofSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateIdentityProof {
  count: Int;
}

export interface AggregateIdentityProofPromise
  extends Promise<AggregateIdentityProof>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateIdentityProofSubscription
  extends Promise<AsyncIterator<AggregateIdentityProof>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PhoneNumberConnection {
  pageInfo: PageInfo;
  edges: PhoneNumberEdge[];
}

export interface PhoneNumberConnectionPromise
  extends Promise<PhoneNumberConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PhoneNumberEdge>>() => T;
  aggregate: <T = AggregatePhoneNumberPromise>() => T;
}

export interface PhoneNumberConnectionSubscription
  extends Promise<AsyncIterator<PhoneNumberConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PhoneNumberEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePhoneNumberSubscription>() => T;
}

export interface PhoneNumberEdge {
  node: PhoneNumber;
  cursor: String;
}

export interface PhoneNumberEdgePromise
  extends Promise<PhoneNumberEdge>,
    Fragmentable {
  node: <T = PhoneNumberPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PhoneNumberEdgeSubscription
  extends Promise<AsyncIterator<PhoneNumberEdge>>,
    Fragmentable {
  node: <T = PhoneNumberSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePhoneNumber {
  count: Int;
}

export interface AggregatePhoneNumberPromise
  extends Promise<AggregatePhoneNumber>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePhoneNumberSubscription
  extends Promise<AsyncIterator<AggregatePhoneNumber>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaxIdConnection {
  pageInfo: PageInfo;
  edges: TaxIdEdge[];
}

export interface TaxIdConnectionPromise
  extends Promise<TaxIdConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaxIdEdge>>() => T;
  aggregate: <T = AggregateTaxIdPromise>() => T;
}

export interface TaxIdConnectionSubscription
  extends Promise<AsyncIterator<TaxIdConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaxIdEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaxIdSubscription>() => T;
}

export interface TaxIdEdge {
  node: TaxId;
  cursor: String;
}

export interface TaxIdEdgePromise extends Promise<TaxIdEdge>, Fragmentable {
  node: <T = TaxIdPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaxIdEdgeSubscription
  extends Promise<AsyncIterator<TaxIdEdge>>,
    Fragmentable {
  node: <T = TaxIdSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaxId {
  count: Int;
}

export interface AggregateTaxIdPromise
  extends Promise<AggregateTaxId>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaxIdSubscription
  extends Promise<AsyncIterator<AggregateTaxId>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttributeSubscriptionPayload {
  mutation: MutationType;
  node: Attribute;
  updatedFields: String[];
  previousValues: AttributePreviousValues;
}

export interface AttributeSubscriptionPayloadPromise
  extends Promise<AttributeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttributePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttributePreviousValuesPromise>() => T;
}

export interface AttributeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttributeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttributeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttributePreviousValuesSubscription>() => T;
}

export interface AttributePreviousValues {
  id: ID_Output;
  attr_type: String;
}

export interface AttributePreviousValuesPromise
  extends Promise<AttributePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  attr_type: () => Promise<String>;
}

export interface AttributePreviousValuesSubscription
  extends Promise<AsyncIterator<AttributePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  attr_type: () => Promise<AsyncIterator<String>>;
}

export interface EmailSubscriptionPayload {
  mutation: MutationType;
  node: Email;
  updatedFields: String[];
  previousValues: EmailPreviousValues;
}

export interface EmailSubscriptionPayloadPromise
  extends Promise<EmailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EmailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EmailPreviousValuesPromise>() => T;
}

export interface EmailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EmailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EmailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EmailPreviousValuesSubscription>() => T;
}

export interface EmailPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface EmailPreviousValuesPromise
  extends Promise<EmailPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface EmailPreviousValuesSubscription
  extends Promise<AsyncIterator<EmailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface IdentityProofSubscriptionPayload {
  mutation: MutationType;
  node: IdentityProof;
  updatedFields: String[];
  previousValues: IdentityProofPreviousValues;
}

export interface IdentityProofSubscriptionPayloadPromise
  extends Promise<IdentityProofSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = IdentityProofPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = IdentityProofPreviousValuesPromise>() => T;
}

export interface IdentityProofSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<IdentityProofSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = IdentityProofSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = IdentityProofPreviousValuesSubscription>() => T;
}

export interface IdentityProofPreviousValues {
  id: ID_Output;
}

export interface IdentityProofPreviousValuesPromise
  extends Promise<IdentityProofPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface IdentityProofPreviousValuesSubscription
  extends Promise<AsyncIterator<IdentityProofPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface PhoneNumberSubscriptionPayload {
  mutation: MutationType;
  node: PhoneNumber;
  updatedFields: String[];
  previousValues: PhoneNumberPreviousValues;
}

export interface PhoneNumberSubscriptionPayloadPromise
  extends Promise<PhoneNumberSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PhoneNumberPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PhoneNumberPreviousValuesPromise>() => T;
}

export interface PhoneNumberSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PhoneNumberSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PhoneNumberSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PhoneNumberPreviousValuesSubscription>() => T;
}

export interface PhoneNumberPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PhoneNumberPreviousValuesPromise
  extends Promise<PhoneNumberPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PhoneNumberPreviousValuesSubscription
  extends Promise<AsyncIterator<PhoneNumberPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TaxIdSubscriptionPayload {
  mutation: MutationType;
  node: TaxId;
  updatedFields: String[];
  previousValues: TaxIdPreviousValues;
}

export interface TaxIdSubscriptionPayloadPromise
  extends Promise<TaxIdSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaxIdPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaxIdPreviousValuesPromise>() => T;
}

export interface TaxIdSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaxIdSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaxIdSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaxIdPreviousValuesSubscription>() => T;
}

export interface TaxIdPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TaxIdPreviousValuesPromise
  extends Promise<TaxIdPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TaxIdPreviousValuesSubscription
  extends Promise<AsyncIterator<TaxIdPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  email: String;
  auth_level?: AuthLevel;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  auth_level: () => Promise<AuthLevel>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  auth_level: () => Promise<AsyncIterator<AuthLevel>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "IdentityProof",
    embedded: false
  },
  {
    name: "TaxId",
    embedded: false
  },
  {
    name: "Email",
    embedded: false
  },
  {
    name: "PhoneNumber",
    embedded: false
  },
  {
    name: "Attribute",
    embedded: false
  },
  {
    name: "TaxIdAttribute",
    embedded: false
  },
  {
    name: "EmailAttribute",
    embedded: false
  },
  {
    name: "PhoneNumberAttribute",
    embedded: false
  },
  {
    name: "AuthLevel",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
